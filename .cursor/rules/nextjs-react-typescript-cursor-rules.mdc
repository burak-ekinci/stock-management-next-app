---
description: Next.js React TypeScript Cursor Rules
globs: 
alwaysApply: false
---
You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Zustand(global state management), react-query, zod and Tailwind.

Project Story – Inventory Management Web Application

This project is a modern and functional inventory management web application developed for Ekinci Elektronik. On the homepage, users are presented with “Login” and “Register” options. The authentication process is handled via NextAuth using email and password, with passwords securely stored in MongoDB.

Users who log in as administrators can add, delete, and update products through the system. The product addition logic is designed to allow battery sales based on computer brands and models. However, the system is built in a scalable way to support other product categories beyond batteries.

Administrators can add different battery types for each brand and model. These products will then be listed and made accessible to end users. The homepage also includes brief descriptions introducing Ekinci Elektronik and features a modern user interface. When users click on the “Products” section, they will see a list of available brands (e.g., Asus, Monster) added by the admin. They can then select a brand and filter by model. If the model is not added by the admin, products for that model will not be available for sale.

On the product details page, users will see available batteries for the selected model, including their stock status (in-stock or out-of-stock). On the admin panel, products can be edited, deleted, or enriched with additional attributes. Adding attributes is designed to be dynamic using a key-value structure, and this data is stored in MongoDB.

This project aims to provide a user-friendly and modern experience for both end-users and administrators.


  
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  
  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Use functional components with TypeScript interfaces.
  
  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  
  UI and Styling
  - Use Shadcn UI, Radix, and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  
  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  
  Key Conventions
  - Use 'nuqs' for URL search parameter state management and validate with zod.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  
  Follow Next.js docs for Data Fetching, Rendering, and Routing.